From 5b84168b5f1a82d7a5700a7476c65b0538ff4ee3 Mon Sep 17 00:00:00 2001
From: Traci Porter <traci707@gmail.com>
Date: Wed, 16 Jul 2025 18:27:01 -0500
Subject: [PATCH] QAAR-1002

---
 pages/BC_link_example.py | 46 +++++++++++++++++++++++++++++
 pages/UI_validation.py   | 62 ++++++++++++++++++++++++++++++++++++++++
 target_search_script.py  |  1 +
 3 files changed, 109 insertions(+)
 create mode 100644 pages/BC_link_example.py
 create mode 100644 pages/UI_validation.py

diff --git a/pages/BC_link_example.py b/pages/BC_link_example.py
new file mode 100644
index 0000000..5b179fa
--- /dev/null
+++ b/pages/BC_link_example.py
@@ -0,0 +1,46 @@
+from selenium import webdriver
+from selenium.webdriver.chrome.service import Service
+from webdriver_manager.chrome import ChromeDriverManager
+from selenium.webdriver.common.by import By
+import requests
+from urllib.parse import urljoin, urlparse
+
+# Base URL to test
+BASE_URL = "https://developer.kustomer.com/"
+
+# Set up Selenium
+options = webdriver.ChromeOptions()
+options.add_argument("--headless")  # Run in headless mode (no browser UI)
+driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
+
+# Visit the page
+driver.get(BASE_URL)
+
+# Get all <a> tags
+anchor_tags = driver.find_elements(By.TAG_NAME, "a")
+links = set()
+
+# Collect href attributes
+for tag in anchor_tags:
+    href = tag.get_attribute("href")
+    if href and href.startswith("http"):
+        links.add(href)
+    elif href and href.startswith("/"):
+        links.add(urljoin(BASE_URL, href))  # Make relative URLs absolute
+
+print(f"Found {len(links)} links. Checking for broken ones...\n")
+
+# Check each link
+for url in sorted(links):
+    try:
+        response = requests.head(url, allow_redirects=True, timeout=10)
+        status = response.status_code
+        if status >= 400:
+            print(f"[BROKEN] {url} ‚Äî Status: {status}")
+        else:
+            print(f"[OK]     {url} ‚Äî Status: {status}")
+    except requests.RequestException as e:
+        print(f"[ERROR]  {url} ‚Äî Exception: {e}")
+
+# Clean up
+driver.quit()
diff --git a/pages/UI_validation.py b/pages/UI_validation.py
new file mode 100644
index 0000000..ceec920
--- /dev/null
+++ b/pages/UI_validation.py
@@ -0,0 +1,62 @@
+from selenium import webdriver
+from selenium.webdriver.common.by import By
+from selenium.webdriver.chrome.options import Options
+import time
+
+# Set up Selenium WebDriver in headless mode
+options = Options()
+options.headless = True
+driver = webdriver.Chrome(options=options)
+
+try:
+    # 1. Load the Kustomer developer site
+    url = "https://developer.kustomer.com"
+    driver.get(url)
+    time.sleep(2)
+
+    # 2. Check title
+    assert "Kustomer" in driver.title
+    print("‚úÖ Title check passed.")
+
+    # 3. Check for endpoint section like 'GET /customers'
+    page_source = driver.page_source
+    if "GET /customers" in page_source:
+        print("‚úÖ 'GET /customers' endpoint is visible.")
+    else:
+        print("‚ùå 'GET /customers' endpoint not found.")
+
+    # 4. Check that code blocks exist
+    code_blocks = driver.find_elements(By.CSS_SELECTOR, "pre code")
+    if len(code_blocks) > 0:
+        print(f"‚úÖ Found {len(code_blocks)} code blocks.")
+    else:
+        print("‚ùå No code blocks found.")
+
+    # 5. Test sidebar navigation links
+    sidebar_links = driver.find_elements(By.CSS_SELECTOR, ".sidebar a")
+    print(f"üß≠ Found {len(sidebar_links)} sidebar links.")
+    for i, link in enumerate(sidebar_links[:5]):  # Just test the first 5 for speed
+        href = link.get_attribute("href")
+        if href and href.startswith("https://developer.kustomer.com"):
+            print(f"‚úÖ Link #{i+1} is valid: {href}")
+        else:
+            print(f"‚ö†Ô∏è Link #{i+1} might be broken or missing: {href}")
+
+    # 6. (Optional) Search test ‚Äì adjust CSS selector if needed
+    try:
+        search_input = driver.find_element(By.CSS_SELECTOR, "input[type='search']")
+        search_input.send_keys("conversation")
+        time.sleep(2)
+        results = driver.find_elements(By.CSS_SELECTOR, ".search-result")
+        if results:
+            print(f"‚úÖ Search returned {len(results)} result(s).")
+        else:
+            print("‚ùå Search returned no results.")
+    except Exception as e:
+        print(f"‚ö†Ô∏è Search input not found or not working: {e}")
+
+except AssertionError as ae:
+    print("‚ùå Assertion failed:", ae)
+
+finally:
+    driver.quit()
diff --git a/target_search_script.py b/target_search_script.py
index 42cb363..529cd4a 100644
--- a/target_search_script.py
+++ b/target_search_script.py
@@ -2,6 +2,7 @@ from time import sleep
 from selenium import webdriver
 from selenium.webdriver.common.by import By
 
+
 #init driver
 driver = webdriver.Chrome()
 driver.maximize_window()
-- 
2.24.3 (Apple Git-128)

